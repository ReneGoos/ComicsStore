// <auto-generated />
using System;
using ComicsStore.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComicsStore.Data.Migrations
{
    [DbContext(typeof(ComicsStoreDbContext))]
    partial class ComicsStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("ComicsStore.Data.Model.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Active");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("BookType");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<int?>("FirstPrint");

                    b.Property<int>("FirstYear");

                    b.Property<string>("Remark");

                    b.Property<int?>("ThisYear");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.BookPublisher", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("PublisherId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.HasKey("BookId", "PublisherId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookPublishers");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.BookSeries", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("SeriesId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("SeriesNr");

                    b.Property<int?>("SeriesOrder");

                    b.HasKey("BookId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("BookSeries");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodeId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("Remark");

                    b.Property<string>("SeriesLanguage")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("SeriesNumber");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodeId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(255);

                    b.Property<double?>("Pages");

                    b.Property<string>("Remark");

                    b.Property<string>("StoryName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("StoryNumber");

                    b.Property<int>("StoryType");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.StoryArtist", b =>
                {
                    b.Property<int>("StoryId");

                    b.Property<int>("ArtistId");

                    b.Property<int>("ArtistType");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.HasKey("StoryId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("StoryArtists");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.StoryBook", b =>
                {
                    b.Property<int>("StoryId");

                    b.Property<int>("BookId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.HasKey("StoryId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("StoryBooks");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.StoryCharacter", b =>
                {
                    b.Property<int>("StoryId");

                    b.Property<int>("CharacterId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateUpdate");

                    b.HasKey("StoryId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("StoryCharacters");
                });

            modelBuilder.Entity("ComicsStore.Data.Model.BookPublisher", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Book", "Book")
                        .WithMany("BookPublisher")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComicsStore.Data.Model.Publisher", "Publisher")
                        .WithMany("BookPublisher")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicsStore.Data.Model.BookSeries", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Book", "Book")
                        .WithMany("BookSeries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComicsStore.Data.Model.Series", "Series")
                        .WithMany("BookSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Series", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Code", "Code")
                        .WithMany("Series")
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicsStore.Data.Model.Story", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Code", "Code")
                        .WithMany("Story")
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicsStore.Data.Model.StoryArtist", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Artist", "Artist")
                        .WithMany("StoryArtist")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComicsStore.Data.Model.Story", "Story")
                        .WithMany("StoryArtist")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicsStore.Data.Model.StoryBook", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Book", "Book")
                        .WithMany("StoryBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComicsStore.Data.Model.Story", "Story")
                        .WithMany("StoryBook")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicsStore.Data.Model.StoryCharacter", b =>
                {
                    b.HasOne("ComicsStore.Data.Model.Character", "Character")
                        .WithMany("StoryCharacter")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComicsStore.Data.Model.Story", "Story")
                        .WithMany("StoryCharacter")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
